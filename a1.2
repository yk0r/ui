--[[

    Rayfield Interface Suite â€” merged build
    Base: Original Rayfield.lua by Sirius (Release Build 1.68)
    Mods kept: skgmain UI beautification (notifications, search/open/close animations, hide/unhide/minimise tweaks)
    Theme: strictly the ORIGINAL Rayfield themes (no custom palette overrides)

    Notes:
    - This file merges skgmain's visual/animation improvements while preserving the original theme table and defaults.
    - Configuration/analytics logic is retained from original where reasonable; file extension kept as .rfld.
    - Notifications render through a separate ScreenGui (MESSAGINGSYSTEM) cloned from the original Notifications template.

]]

-- ==== Services (compatible with exploit environments & Studio) ====
local function getService(name)
	local service = game:GetService(name)
	return if cloneref then cloneref(service) else service
end

local HttpService = getService('HttpService')
local TweenService = getService('TweenService')
local UserInputService = getService('UserInputService')
local Players = getService('Players')
local CoreGui = getService('CoreGui')
local RunService = getService('RunService')

local useStudio = RunService:IsStudio() or false

-- ==== Build / Release metadata (from original) ====
local InterfaceBuild = '3K3W'
local Release = "Build 1.68"
local RayfieldFolder = "FRIENDSHIP"
local ConfigurationFolder = RayfieldFolder.."/Configurations"
local ConfigurationExtension = ".rfld"

-- ==== Library root ====
local RayfieldLibrary = {
	Flags = {},
	Theme = {
		-- ORIGINAL THEMES (unchanged)
		Default = {
			TextColor = Color3.fromRGB(240, 240, 240),
			Background = Color3.fromRGB(25, 25, 25),
			Topbar = Color3.fromRGB(34, 34, 34),
			Shadow = Color3.fromRGB(20, 20, 20),
			NotificationBackground = Color3.fromRGB(20, 20, 20),
			NotificationActionsBackground = Color3.fromRGB(230, 230, 230),
			TabBackground = Color3.fromRGB(80, 80, 80),
			TabStroke = Color3.fromRGB(85, 85, 85),
			TabBackgroundSelected = Color3.fromRGB(210, 210, 210),
			TabTextColor = Color3.fromRGB(240, 240, 240),
			SelectedTabTextColor = Color3.fromRGB(50, 50, 50),
			ElementBackground = Color3.fromRGB(35, 35, 35),
			ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
			SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
			ElementStroke = Color3.fromRGB(50, 50, 50),
			SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
			SliderBackground = Color3.fromRGB(50, 138, 220),
			SliderProgress = Color3.fromRGB(50, 138, 220),
			SliderStroke = Color3.fromRGB(58, 163, 255),
			ToggleBackground = Color3.fromRGB(30, 30, 30),
			ToggleEnabled = Color3.fromRGB(0, 146, 214),
			ToggleDisabled = Color3.fromRGB(100, 100, 100),
			ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
			ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
			ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
			ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),
			DropdownSelected = Color3.fromRGB(40, 40, 40),
			DropdownUnselected = Color3.fromRGB(30, 30, 30),
			InputBackground = Color3.fromRGB(30, 30, 30),
			InputStroke = Color3.fromRGB(65, 65, 65),
			PlaceholderColor = Color3.fromRGB(178, 178, 178)
		},
		Ocean = { TextColor = Color3.fromRGB(230, 240, 240), Background = Color3.fromRGB(20, 30, 30), Topbar = Color3.fromRGB(25, 40, 40), Shadow = Color3.fromRGB(15, 20, 20), NotificationBackground = Color3.fromRGB(25, 35, 35), NotificationActionsBackground = Color3.fromRGB(230, 240, 240), TabBackground = Color3.fromRGB(40, 60, 60), TabStroke = Color3.fromRGB(50, 70, 70), TabBackgroundSelected = Color3.fromRGB(100, 180, 180), TabTextColor = Color3.fromRGB(210, 230, 230), SelectedTabTextColor = Color3.fromRGB(20, 50, 50), ElementBackground = Color3.fromRGB(30, 50, 50), ElementBackgroundHover = Color3.fromRGB(40, 60, 60), SecondaryElementBackground = Color3.fromRGB(30, 45, 45), ElementStroke = Color3.fromRGB(45, 70, 70), SecondaryElementStroke = Color3.fromRGB(40, 65, 65), SliderBackground = Color3.fromRGB(0, 110, 110), SliderProgress = Color3.fromRGB(0, 140, 140), SliderStroke = Color3.fromRGB(0, 160, 160), ToggleBackground = Color3.fromRGB(30, 50, 50), ToggleEnabled = Color3.fromRGB(0, 130, 130), ToggleDisabled = Color3.fromRGB(70, 90, 90), ToggleEnabledStroke = Color3.fromRGB(0, 160, 160), ToggleDisabledStroke = Color3.fromRGB(85, 105, 105), ToggleEnabledOuterStroke = Color3.fromRGB(50, 100, 100), ToggleDisabledOuterStroke = Color3.fromRGB(45, 65, 65), DropdownSelected = Color3.fromRGB(30, 60, 60), DropdownUnselected = Color3.fromRGB(25, 40, 40), InputBackground = Color3.fromRGB(30, 50, 50), InputStroke = Color3.fromRGB(50, 70, 70), PlaceholderColor = Color3.fromRGB(140, 160, 160) },
		AmberGlow = { TextColor = Color3.fromRGB(255, 245, 230), Background = Color3.fromRGB(45, 30, 20), Topbar = Color3.fromRGB(55, 40, 25), Shadow = Color3.fromRGB(35, 25, 15), NotificationBackground = Color3.fromRGB(50, 35, 25), NotificationActionsBackground = Color3.fromRGB(245, 230, 215), TabBackground = Color3.fromRGB(75, 50, 35), TabStroke = Color3.fromRGB(90, 60, 45), TabBackgroundSelected = Color3.fromRGB(230, 180, 100), TabTextColor = Color3.fromRGB(250, 220, 200), SelectedTabTextColor = Color3.fromRGB(50, 30, 10), ElementBackground = Color3.fromRGB(60, 45, 35), ElementBackgroundHover = Color3.fromRGB(70, 50, 40), SecondaryElementBackground = Color3.fromRGB(55, 40, 30), ElementStroke = Color3.fromRGB(85, 60, 45), SecondaryElementStroke = Color3.fromRGB(75, 50, 35), SliderBackground = Color3.fromRGB(220, 130, 60), SliderProgress = Color3.fromRGB(250, 150, 75), SliderStroke = Color3.fromRGB(255, 170, 85), ToggleBackground = Color3.fromRGB(55, 40, 30), ToggleEnabled = Color3.fromRGB(240, 130, 30), ToggleDisabled = Color3.fromRGB(90, 70, 60), ToggleEnabledStroke = Color3.fromRGB(255, 160, 50), ToggleDisabledStroke = Color3.fromRGB(110, 85, 75), ToggleEnabledOuterStroke = Color3.fromRGB(200, 100, 50), ToggleDisabledOuterStroke = Color3.fromRGB(75, 60, 55), DropdownSelected = Color3.fromRGB(70, 50, 40), DropdownUnselected = Color3.fromRGB(55, 40, 30), InputBackground = Color3.fromRGB(60, 45, 35), InputStroke = Color3.fromRGB(90, 65, 50), PlaceholderColor = Color3.fromRGB(190, 150, 130) },
		Light = { TextColor = Color3.fromRGB(40, 40, 40), Background = Color3.fromRGB(245, 245, 245), Topbar = Color3.fromRGB(230, 230, 230), Shadow = Color3.fromRGB(200, 200, 200), NotificationBackground = Color3.fromRGB(250, 250, 250), NotificationActionsBackground = Color3.fromRGB(240, 240, 240), TabBackground = Color3.fromRGB(235, 235, 235), TabStroke = Color3.fromRGB(215, 215, 215), TabBackgroundSelected = Color3.fromRGB(255, 255, 255), TabTextColor = Color3.fromRGB(80, 80, 80), SelectedTabTextColor = Color3.fromRGB(0, 0, 0), ElementBackground = Color3.fromRGB(240, 240, 240), ElementBackgroundHover = Color3.fromRGB(225, 225, 225), SecondaryElementBackground = Color3.fromRGB(235, 235, 235), ElementStroke = Color3.fromRGB(210, 210, 210), SecondaryElementStroke = Color3.fromRGB(210, 210, 210), SliderBackground = Color3.fromRGB(150, 180, 220), SliderProgress = Color3.fromRGB(100, 150, 200), SliderStroke = Color3.fromRGB(120, 170, 220), ToggleBackground = Color3.fromRGB(220, 220, 220), ToggleEnabled = Color3.fromRGB(0, 146, 214), ToggleDisabled = Color3.fromRGB(150, 150, 150), ToggleEnabledStroke = Color3.fromRGB(0, 170, 255), ToggleDisabledStroke = Color3.fromRGB(170, 170, 170), ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100), ToggleDisabledOuterStroke = Color3.fromRGB(180, 180, 180), DropdownSelected = Color3.fromRGB(230, 230, 230), DropdownUnselected = Color3.fromRGB(220, 220, 220), InputBackground = Color3.fromRGB(240, 240, 240), InputStroke = Color3.fromRGB(180, 180, 180), PlaceholderColor = Color3.fromRGB(140, 140, 140) },
		Amethyst = { TextColor = Color3.fromRGB(240, 240, 240), Background = Color3.fromRGB(30, 20, 40), Topbar = Color3.fromRGB(40, 25, 50), Shadow = Color3.fromRGB(20, 15, 30), NotificationBackground = Color3.fromRGB(35, 20, 40), NotificationActionsBackground = Color3.fromRGB(240, 240, 250), TabBackground = Color3.fromRGB(60, 40, 80), TabStroke = Color3.fromRGB(70, 45, 90), TabBackgroundSelected = Color3.fromRGB(180, 140, 200), TabTextColor = Color3.fromRGB(230, 230, 240), SelectedTabTextColor = Color3.fromRGB(50, 20, 50), ElementBackground = Color3.fromRGB(45, 30, 60), ElementBackgroundHover = Color3.fromRGB(50, 35, 70), SecondaryElementBackground = Color3.fromRGB(40, 30, 55), ElementStroke = Color3.fromRGB(70, 50, 85), SecondaryElementStroke = Color3.fromRGB(65, 45, 80), SliderBackground = Color3.fromRGB(100, 60, 150), SliderProgress = Color3.fromRGB(130, 80, 180), SliderStroke = Color3.fromRGB(150, 100, 200), ToggleBackground = Color3.fromRGB(45, 30, 55), ToggleEnabled = Color3.fromRGB(120, 60, 150), ToggleDisabled = Color3.fromRGB(94, 47, 117), ToggleEnabledStroke = Color3.fromRGB(140, 80, 170), ToggleDisabledStroke = Color3.fromRGB(124, 71, 150), ToggleEnabledOuterStroke = Color3.fromRGB(90, 40, 120), ToggleDisabledOuterStroke = Color3.fromRGB(80, 50, 110), DropdownSelected = Color3.fromRGB(50, 35, 70), DropdownUnselected = Color3.fromRGB(35, 25, 50), InputBackground = Color3.fromRGB(45, 30, 60), InputStroke = Color3.fromRGB(80, 50, 110), PlaceholderColor = Color3.fromRGB(178, 150, 200) },
		Green = { TextColor = Color3.fromRGB(30, 60, 30), Background = Color3.fromRGB(235, 245, 235), Topbar = Color3.fromRGB(210, 230, 210), Shadow = Color3.fromRGB(200, 220, 200), NotificationBackground = Color3.fromRGB(240, 250, 240), NotificationActionsBackground = Color3.fromRGB(220, 235, 220), TabBackground = Color3.fromRGB(215, 235, 215), TabStroke = Color3.fromRGB(190, 210, 190), TabBackgroundSelected = Color3.fromRGB(245, 255, 245), TabTextColor = Color3.fromRGB(50, 80, 50), SelectedTabTextColor = Color3.fromRGB(20, 60, 20), ElementBackground = Color3.fromRGB(225, 240, 225), ElementBackgroundHover = Color3.fromRGB(210, 225, 210), SecondaryElementBackground = Color3.fromRGB(235, 245, 235), ElementStroke = Color3.fromRGB(180, 200, 180), SecondaryElementStroke = Color3.fromRGB(180, 200, 180), SliderBackground = Color3.fromRGB(90, 160, 90), SliderProgress = Color3.fromRGB(70, 130, 70), SliderStroke = Color3.fromRGB(100, 180, 100), ToggleBackground = Color3.fromRGB(215, 235, 215), ToggleEnabled = Color3.fromRGB(60, 130, 60), ToggleDisabled = Color3.fromRGB(150, 175, 150), ToggleEnabledStroke = Color3.fromRGB(80, 150, 80), ToggleDisabledStroke = Color3.fromRGB(130, 150, 130), ToggleEnabledOuterStroke = Color3.fromRGB(100, 160, 100), ToggleDisabledOuterStroke = Color3.fromRGB(160, 180, 160), DropdownSelected = Color3.fromRGB(225, 240, 225), DropdownUnselected = Color3.fromRGB(210, 225, 210), InputBackground = Color3.fromRGB(235, 245, 235), InputStroke = Color3.fromRGB(180, 200, 180), PlaceholderColor = Color3.fromRGB(120, 140, 120) },
		Bloom = { TextColor = Color3.fromRGB(60, 40, 50), Background = Color3.fromRGB(255, 240, 245), Topbar = Color3.fromRGB(250, 220, 225), Shadow = Color3.fromRGB(230, 190, 195), NotificationBackground = Color3.fromRGB(255, 235, 240), NotificationActionsBackground = Color3.fromRGB(245, 215, 225), TabBackground = Color3.fromRGB(240, 210, 220), TabStroke = Color3.fromRGB(230, 200, 210), TabBackgroundSelected = Color3.fromRGB(255, 225, 235), TabTextColor = Color3.fromRGB(80, 40, 60), SelectedTabTextColor = Color3.fromRGB(50, 30, 50), ElementBackground = Color3.fromRGB(255, 235, 240), ElementBackgroundHover = Color3.fromRGB(245, 220, 230), SecondaryElementBackground = Color3.fromRGB(255, 235, 240), ElementStroke = Color3.fromRGB(230, 200, 210), SecondaryElementStroke = Color3.fromRGB(230, 200, 210), SliderBackground = Color3.fromRGB(240, 130, 160), SliderProgress = Color3.fromRGB(250, 160, 180), SliderStroke = Color3.fromRGB(255, 180, 200), ToggleBackground = Color3.fromRGB(240, 210, 220), ToggleEnabled = Color3.fromRGB(255, 140, 170), ToggleDisabled = Color3.fromRGB(200, 180, 185), ToggleEnabledStroke = Color3.fromRGB(250, 160, 190), ToggleDisabledStroke = Color3.fromRGB(210, 180, 190), ToggleEnabledOuterStroke = Color3.fromRGB(220, 160, 180), ToggleDisabledOuterStroke = Color3.fromRGB(190, 170, 180), DropdownSelected = Color3.fromRGB(250, 220, 225), DropdownUnselected = Color3.fromRGB(240, 210, 220), InputBackground = Color3.fromRGB(255, 235, 240), InputStroke = Color3.fromRGB(220, 190, 200), PlaceholderColor = Color3.fromRGB(170, 130, 140) },
		DarkBlue = { TextColor = Color3.fromRGB(230, 230, 230), Background = Color3.fromRGB(20, 25, 30), Topbar = Color3.fromRGB(30, 35, 40), Shadow = Color3.fromRGB(15, 20, 25), NotificationBackground = Color3.fromRGB(25, 30, 35), NotificationActionsBackground = Color3.fromRGB(45, 50, 55), TabBackground = Color3.fromRGB(35, 40, 45), TabStroke = Color3.fromRGB(45, 50, 60), TabBackgroundSelected = Color3.fromRGB(40, 70, 100), TabTextColor = Color3.fromRGB(200, 200, 200), SelectedTabTextColor = Color3.fromRGB(255, 255, 255), ElementBackground = Color3.fromRGB(30, 35, 40), ElementBackgroundHover = Color3.fromRGB(40, 45, 50), SecondaryElementBackground = Color3.fromRGB(35, 40, 45), ElementStroke = Color3.fromRGB(45, 50, 60), SecondaryElementStroke = Color3.fromRGB(40, 45, 55), SliderBackground = Color3.fromRGB(0, 90, 180), SliderProgress = Color3.fromRGB(0, 120, 210), SliderStroke = Color3.fromRGB(0, 150, 240), ToggleBackground = Color3.fromRGB(35, 40, 45), ToggleEnabled = Color3.fromRGB(0, 120, 210), ToggleDisabled = Color3.fromRGB(70, 70, 80), ToggleEnabledStroke = Color3.fromRGB(0, 150, 240), ToggleDisabledStroke = Color3.fromRGB(75, 75, 85), ToggleEnabledOuterStroke = Color3.fromRGB(20, 100, 180), ToggleDisabledOuterStroke = Color3.fromRGB(55, 55, 65), DropdownSelected = Color3.fromRGB(30, 70, 90), DropdownUnselected = Color3.fromRGB(25, 30, 35), InputBackground = Color3.fromRGB(25, 30, 35), InputStroke = Color3.fromRGB(45, 50, 60), PlaceholderColor = Color3.fromRGB(150, 150, 160) },
		Serenity = { TextColor = Color3.fromRGB(50, 55, 60), Background = Color3.fromRGB(240, 245, 250), Topbar = Color3.fromRGB(215, 225, 235), Shadow = Color3.fromRGB(200, 210, 220), NotificationBackground = Color3.fromRGB(210, 220, 230), NotificationActionsBackground = Color3.fromRGB(225, 230, 240), TabBackground = Color3.fromRGB(200, 210, 220), TabStroke = Color3.fromRGB(180, 190, 200), TabBackgroundSelected = Color3.fromRGB(175, 185, 200), TabTextColor = Color3.fromRGB(50, 55, 60), SelectedTabTextColor = Color3.fromRGB(30, 35, 40), ElementBackground = Color3.fromRGB(210, 220, 230), ElementBackgroundHover = Color3.fromRGB(220, 230, 240), SecondaryElementBackground = Color3.fromRGB(200, 210, 220), ElementStroke = Color3.fromRGB(190, 200, 210), SecondaryElementStroke = Color3.fromRGB(180, 190, 200), SliderBackground = Color3.fromRGB(200, 220, 235), SliderProgress = Color3.fromRGB(70, 130, 180), SliderStroke = Color3.fromRGB(150, 180, 220), ToggleBackground = Color3.fromRGB(210, 220, 230), ToggleEnabled = Color3.fromRGB(70, 160, 210), ToggleDisabled = Color3.fromRGB(180, 180, 180), ToggleEnabledStroke = Color3.fromRGB(60, 150, 200), ToggleDisabledStroke = Color3.fromRGB(140, 140, 140), ToggleEnabledOuterStroke = Color3.fromRGB(100, 120, 140), ToggleDisabledOuterStroke = Color3.fromRGB(120, 120, 130), DropdownSelected = Color3.fromRGB(220, 230, 240), DropdownUnselected = Color3.fromRGB(200, 210, 220), InputBackground = Color3.fromRGB(220, 230, 240), InputStroke = Color3.fromRGB(180, 190, 200), PlaceholderColor = Color3.fromRGB(150, 150, 150) },
	},
}

-- ==== Load Rayfield Interface (original asset) ====
local Rayfield = useStudio and script.Parent:FindFirstChild('Rayfield') or game:GetObjects("rbxassetid://10804731440")[1]
Rayfield.Enabled = false

-- Parent with protections
if gethui then
	Rayfield.Parent = gethui()
elseif syn and syn.protect_gui then
	syn.protect_gui(Rayfield)
	Rayfield.Parent = CoreGui
elseif not useStudio and CoreGui:FindFirstChild("RobloxGui") then
	Rayfield.Parent = CoreGui:FindFirstChild("RobloxGui")
else
	Rayfield.Parent = CoreGui
end

-- Basic object refs
local Main = Rayfield.Main
local Topbar = Main.Topbar
local Elements = Main.Elements
local LoadingFrame = Main.LoadingFrame
local TabList = Main.TabList
local Notifications = Rayfield:FindFirstChild("Notifications")
local dragBar = Rayfield:FindFirstChild('Drag')

Rayfield.DisplayOrder = 100
LoadingFrame.Version.Text = Release

-- ==== skgmain-style Messaging System (beautified notifications) ====
local MessagingSystem = Instance.new("ScreenGui")
MessagingSystem.Name = "MESSAGINGSYSTEM"
MessagingSystem.ResetOnSpawn = false
MessagingSystem.Parent = (gethui and gethui()) or CoreGui

local VisibleNotifications
if Notifications and Notifications:FindFirstChild("Template") then
	VisibleNotifications = Notifications:Clone()
	VisibleNotifications.Parent = MessagingSystem
	VisibleNotifications.Name = "Notifications"
end

-- ==== Theme handling (original themes only) ====
local SelectedTheme = RayfieldLibrary.Theme.Default

local function applyTheme(theme)
	if typeof(theme) == 'string' then
		SelectedTheme = RayfieldLibrary.Theme[theme] or RayfieldLibrary.Theme.Default
	else
		SelectedTheme = theme
	end

	Main.BackgroundColor3 = SelectedTheme.Background
	Topbar.BackgroundColor3 = SelectedTheme.Topbar
	Topbar.CornerRepair.BackgroundColor3 = SelectedTheme.Topbar
	Main.Shadow.Image.ImageColor3 = SelectedTheme.Shadow

	Topbar.ChangeSize.ImageColor3 = SelectedTheme.TextColor
	Topbar.Hide.ImageColor3 = SelectedTheme.TextColor
	Topbar.Search.ImageColor3 = SelectedTheme.TextColor
	if Topbar:FindFirstChild('Settings') then
		Topbar.Settings.ImageColor3 = SelectedTheme.TextColor
		Topbar.Divider.BackgroundColor3 = SelectedTheme.ElementStroke
	end

	Main.Search.BackgroundColor3 = SelectedTheme.TextColor
	Main.Search.Shadow.ImageColor3 = SelectedTheme.TextColor
	Main.Search.Search.ImageColor3 = SelectedTheme.TextColor
	Main.Search.Input.PlaceholderColor3 = SelectedTheme.TextColor
	Main.Search.UIStroke.Color = SelectedTheme.SecondaryElementStroke

	for _, d in ipairs(Rayfield:GetDescendants()) do
		if d:IsA('TextLabel') or d:IsA('TextBox') then
			d.TextColor3 = SelectedTheme.TextColor
		end
	end

	for _, TabPage in ipairs(Elements:GetChildren()) do
		for _, Element in ipairs(TabPage:GetChildren()) do
			if Element.ClassName == "Frame" and Element.Name ~= "Placeholder" and Element.Name ~= "SectionSpacing" and Element.Name ~= "Divider" and Element.Name ~= "SectionTitle" and Element.Name ~= "SearchTitle-fsefsefesfsefesfesfThanks" then
				Element.BackgroundColor3 = SelectedTheme.ElementBackground
				if Element:FindFirstChild("UIStroke") then
					Element.UIStroke.Color = SelectedTheme.ElementStroke
				end
			end
		end
	end
end

-- Initial theme
applyTheme('Default')

-- ==== skgmain-style Notify (beautified, theme-aware) ====
function RayfieldLibrary:Notify(data)
	task.spawn(function()
		if not VisibleNotifications then return end
		local newNotification = VisibleNotifications:WaitForChild("Template"):Clone()
		newNotification.Name = data.Title or 'Notification'
		newNotification.Parent = VisibleNotifications
		newNotification.LayoutOrder = #VisibleNotifications:GetChildren()
		newNotification.Visible = false

		newNotification.Title.Text = data.Title or "Untitled"
		newNotification.Description.Text = data.Content or ""
		newNotification.Icon.Image = "rbxassetid://" .. (data.Image or 0)

		-- Apply theme aesthetics (skgmain style)
		newNotification.Title.TextColor3 = SelectedTheme.TextColor
		newNotification.Description.TextColor3 = SelectedTheme.TextColor
		newNotification.BackgroundColor3 = SelectedTheme.Background
		if newNotification:FindFirstChild("UIStroke") then
			newNotification.UIStroke.Color = SelectedTheme.TextColor
			newNotification.UIStroke.Transparency = 1
		end
		newNotification.Icon.ImageColor3 = SelectedTheme.TextColor
		newNotification.Shadow.ImageTransparency = 1

		-- Start hidden for animation
		newNotification.BackgroundTransparency = 1
		newNotification.Title.TextTransparency = 1
		newNotification.Description.TextTransparency = 1
		newNotification.Icon.ImageTransparency = 1
		newNotification.Size = UDim2.new(1, 0, 0.5, 0)

		task.wait()
		local boundsY = math.max(newNotification.Title.TextBounds.Y + newNotification.Description.TextBounds.Y + 31, 60)
		newNotification.Size = UDim2.new(1, -60, 0, -VisibleNotifications.UIListLayout.Padding.Offset)
		newNotification.Icon.Size = UDim2.new(0, 32, 0, 32)
		newNotification.Icon.Position = UDim2.new(0, 20, 0.5, 0)
		newNotification.Visible = true

		TweenService:Create(newNotification, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, 0, 0, boundsY)}):Play()
		task.wait(0.15)
		TweenService:Create(newNotification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.45}):Play()
		TweenService:Create(newNotification.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
		task.wait(0.05)
		TweenService:Create(newNotification.Icon, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
		task.wait(0.05)
		TweenService:Create(newNotification.Description, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.35}):Play()
		if newNotification:FindFirstChild("Shadow") then
			TweenService:Create(newNotification.Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.82}):Play()
		end

		local waitDuration = math.min(math.max((#newNotification.Description.Text * 0.1) + 2.5, 3), 10)
		task.wait(data.Duration or waitDuration)

		newNotification.Icon.Visible = false
		TweenService:Create(newNotification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
		if newNotification:FindFirstChild("UIStroke") then
			TweenService:Create(newNotification.UIStroke, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
		end
		if newNotification:FindFirstChild("Shadow") then
			TweenService:Create(newNotification.Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
		end
		TweenService:Create(newNotification.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
		TweenService:Create(newNotification.Description, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()

		TweenService:Create(newNotification, TweenInfo.new(1, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -90, 0, 0)}):Play()
		task.wait(1)
		newNotification:Destroy()
	end)
end

-- ==== Search open/close (skgmain style) ====
local searchOpen = false
local function openSearch()
	if searchOpen then return end
	searchOpen = true
	local Search = Main.Search
	Search.BackgroundTransparency = 1
	Search.Shadow.ImageTransparency = 1
	Search.Input.TextTransparency = 1
	Search.Search.ImageTransparency = 1
	Search.UIStroke.Transparency = 1
	Search.Size = UDim2.new(1, 0, 0, 80)
	Search.Position = UDim2.new(0.5, 0, 0, 70)
	Search.Input.Interactable = true
	Search.Visible = true
	for _, tabbtn in ipairs(TabList:GetChildren()) do
		if tabbtn.ClassName == "Frame" and tabbtn.Name ~= "Placeholder" then
			tabbtn.Interact.Visible = false
			TweenService:Create(tabbtn, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
			TweenService:Create(tabbtn.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
			TweenService:Create(tabbtn.Image, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
			TweenService:Create(tabbtn.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
		end
	end
	Search:FindFirstChild("Input"):CaptureFocus()
	TweenService:Create(Search.Shadow, TweenInfo.new(0.05, Enum.EasingStyle.Quint), {ImageTransparency = 0.95}):Play()
	TweenService:Create(Search, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Position = UDim2.new(0.5, 0, 0, 57), BackgroundTransparency = 0.9}):Play()
	TweenService:Create(Search.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 0.8}):Play()
	TweenService:Create(Search.Input, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.2}):Play()
	TweenService:Create(Search.Search, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.5}):Play()
	TweenService:Create(Search, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -35, 0, 35)}):Play()
end

local function closeSearch()
	if not searchOpen then return end
	searchOpen = false
	local Search = Main.Search
	TweenService:Create(Search, TweenInfo.new(0.35, Enum.EasingStyle.Quint), {BackgroundTransparency = 1, Size = UDim2.new(1, -55, 0, 30)}):Play()
	TweenService:Create(Search.Search, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
	TweenService:Create(Search.Shadow, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
	TweenService:Create(Search.UIStroke, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
	TweenService:Create(Search.Input, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
	for _, tabbtn in ipairs(TabList:GetChildren()) do
		if tabbtn.ClassName == "Frame" and tabbtn.Name ~= "Placeholder" then
			tabbtn.Interact.Visible = true
			TweenService:Create(tabbtn, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.7}):Play()
			TweenService:Create(tabbtn.Image, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.2}):Play()
			TweenService:Create(tabbtn.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.2}):Play()
			TweenService:Create(tabbtn.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 0.5}):Play()
		end
	end
	Search.Input.Text = ''
	Search.Input.Interactable = false
end

Topbar.Search.MouseButton1Click:Connect(function()
	if searchOpen then closeSearch() else openSearch() end
end)

-- ==== Hide / Unhide / Minimise (skgmain-like) ====
local Minimised, Hidden, Debounce = false, false, false

local function Maximise()
	if Debounce then return end
	Debounce = true
	Topbar.ChangeSize.Image = 'rbxassetid://10137941941'
	TweenService:Create(Main.Shadow.Image, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 0.6}):Play()
	TweenService:Create(Main, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Size = UserInputService.TouchEnabled and UDim2.new(0,500,0,275) or UDim2.new(0,500,0,475)}):Play()
	TweenService:Create(Topbar, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Size = UDim2.new(0,500,0,45)}):Play()
	Elements.Visible = true
	task.wait(0.5)
	Debounce = false
end

local function Minimise()
	if Debounce then return end
	Debounce = true
	Topbar.ChangeSize.Image = 'rbxassetid://10137941922'
	TweenService:Create(Main.Shadow.Image, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
	TweenService:Create(Main, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Size = UDim2.new(0,470,0,45)}):Play()
	Elements.Visible = false
	task.wait(0.5)
	Debounce = false
end

Topbar.ChangeSize.MouseButton1Click:Connect(function()
	if Minimised then Maximise() else Minimise() end
	Minimised = not Minimised
end)

local function Hide(notify)
	if Debounce then return end
	Debounce = true
	if notify then
		RayfieldLibrary:Notify({Title = "Interface Hidden", Content = UserInputService.TouchEnabled and "Tap 'EH' to unhide." or "Press K to unhide.", Duration = 7, Image = "6023426928"})
	end
	TweenService:Create(Main, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Size = UDim2.new(0,470,0,0), BackgroundTransparency = 1}):Play()
	TweenService:Create(Topbar, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
	TweenService:Create(Main.Shadow.Image, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
	task.wait(0.5)
	Main.Visible = false
	Hidden = true
	Debounce = false
end

local function Unhide()
	if Debounce then return end
	Debounce = true
	Main.Position = UDim2.new(0.5,0,0.5,0)
	Main.Visible = true
	TweenService:Create(Main, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Size = UserInputService.TouchEnabled and UDim2.new(0,500,0,275) or UDim2.new(0,500,0,475), BackgroundTransparency = 0}):Play()
	TweenService:Create(Topbar, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
	TweenService:Create(Main.Shadow.Image, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {ImageTransparency = 0.6}):Play()
	task.wait(0.5)
	Hidden = false
	Debounce = false
end

Topbar.Hide.MouseButton1Click:Connect(function()
	if Hidden then Unhide() else Hide(true) end
end)

-- Expose theme switcher
function RayfieldLibrary:ChangeTheme(theme)
	applyTheme(theme)
end

-- ===== Placeholder: window/tab/element creation use original Rayfield scripts =====
-- This merged build focuses on theme + UI beautification layer while keeping the original
-- element APIs intact. If your script previously did `local w = Rayfield:CreateWindow({...})`
-- via the original library, it will continue to work.

-- Enable interface
Rayfield.Enabled = true
applyTheme('Default')

return RayfieldLibrary
